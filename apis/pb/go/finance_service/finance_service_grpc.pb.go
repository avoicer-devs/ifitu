// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: finance_service.proto

package finance_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FinanceServiceClient is the client API for FinanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinanceServiceClient interface {
	StartCheckout(ctx context.Context, in *StartCheckoutRequest, opts ...grpc.CallOption) (*StartCheckoutResponse, error)
	GetPayments(ctx context.Context, in *GetPaymentsRequest, opts ...grpc.CallOption) (*GetPaymentsResponse, error)
	AddPaymentMethod(ctx context.Context, in *AddPaymentMethodRequest, opts ...grpc.CallOption) (*AddPaymentMethodResponse, error)
	GetPaymentMethods(ctx context.Context, in *GetPaymentMethodsRequest, opts ...grpc.CallOption) (*GetPaymentMethodsResponse, error)
	RemovePaymentMethod(ctx context.Context, in *RemovePaymentMethodRequest, opts ...grpc.CallOption) (*RemovePaymentMethodResponse, error)
	SaveAuthorization(ctx context.Context, in *SaveAuthorizationRequest, opts ...grpc.CallOption) (*SaveAuthorizationResponse, error)
	CaptureFunds(ctx context.Context, in *CaptureFundsRequest, opts ...grpc.CallOption) (*CaptureFundsResponse, error)
	GetPayroll(ctx context.Context, in *GetPayrollRequest, opts ...grpc.CallOption) (*GetPayrollResponse, error)
}

type financeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinanceServiceClient(cc grpc.ClientConnInterface) FinanceServiceClient {
	return &financeServiceClient{cc}
}

func (c *financeServiceClient) StartCheckout(ctx context.Context, in *StartCheckoutRequest, opts ...grpc.CallOption) (*StartCheckoutResponse, error) {
	out := new(StartCheckoutResponse)
	err := c.cc.Invoke(ctx, "/finance_service.FinanceService/StartCheckout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) GetPayments(ctx context.Context, in *GetPaymentsRequest, opts ...grpc.CallOption) (*GetPaymentsResponse, error) {
	out := new(GetPaymentsResponse)
	err := c.cc.Invoke(ctx, "/finance_service.FinanceService/GetPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) AddPaymentMethod(ctx context.Context, in *AddPaymentMethodRequest, opts ...grpc.CallOption) (*AddPaymentMethodResponse, error) {
	out := new(AddPaymentMethodResponse)
	err := c.cc.Invoke(ctx, "/finance_service.FinanceService/AddPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) GetPaymentMethods(ctx context.Context, in *GetPaymentMethodsRequest, opts ...grpc.CallOption) (*GetPaymentMethodsResponse, error) {
	out := new(GetPaymentMethodsResponse)
	err := c.cc.Invoke(ctx, "/finance_service.FinanceService/GetPaymentMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) RemovePaymentMethod(ctx context.Context, in *RemovePaymentMethodRequest, opts ...grpc.CallOption) (*RemovePaymentMethodResponse, error) {
	out := new(RemovePaymentMethodResponse)
	err := c.cc.Invoke(ctx, "/finance_service.FinanceService/RemovePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) SaveAuthorization(ctx context.Context, in *SaveAuthorizationRequest, opts ...grpc.CallOption) (*SaveAuthorizationResponse, error) {
	out := new(SaveAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/finance_service.FinanceService/SaveAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) CaptureFunds(ctx context.Context, in *CaptureFundsRequest, opts ...grpc.CallOption) (*CaptureFundsResponse, error) {
	out := new(CaptureFundsResponse)
	err := c.cc.Invoke(ctx, "/finance_service.FinanceService/CaptureFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) GetPayroll(ctx context.Context, in *GetPayrollRequest, opts ...grpc.CallOption) (*GetPayrollResponse, error) {
	out := new(GetPayrollResponse)
	err := c.cc.Invoke(ctx, "/finance_service.FinanceService/GetPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinanceServiceServer is the server API for FinanceService service.
// All implementations must embed UnimplementedFinanceServiceServer
// for forward compatibility
type FinanceServiceServer interface {
	StartCheckout(context.Context, *StartCheckoutRequest) (*StartCheckoutResponse, error)
	GetPayments(context.Context, *GetPaymentsRequest) (*GetPaymentsResponse, error)
	AddPaymentMethod(context.Context, *AddPaymentMethodRequest) (*AddPaymentMethodResponse, error)
	GetPaymentMethods(context.Context, *GetPaymentMethodsRequest) (*GetPaymentMethodsResponse, error)
	RemovePaymentMethod(context.Context, *RemovePaymentMethodRequest) (*RemovePaymentMethodResponse, error)
	SaveAuthorization(context.Context, *SaveAuthorizationRequest) (*SaveAuthorizationResponse, error)
	CaptureFunds(context.Context, *CaptureFundsRequest) (*CaptureFundsResponse, error)
	GetPayroll(context.Context, *GetPayrollRequest) (*GetPayrollResponse, error)
	mustEmbedUnimplementedFinanceServiceServer()
}

// UnimplementedFinanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFinanceServiceServer struct {
}

func (UnimplementedFinanceServiceServer) StartCheckout(context.Context, *StartCheckoutRequest) (*StartCheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCheckout not implemented")
}
func (UnimplementedFinanceServiceServer) GetPayments(context.Context, *GetPaymentsRequest) (*GetPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayments not implemented")
}
func (UnimplementedFinanceServiceServer) AddPaymentMethod(context.Context, *AddPaymentMethodRequest) (*AddPaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentMethod not implemented")
}
func (UnimplementedFinanceServiceServer) GetPaymentMethods(context.Context, *GetPaymentMethodsRequest) (*GetPaymentMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentMethods not implemented")
}
func (UnimplementedFinanceServiceServer) RemovePaymentMethod(context.Context, *RemovePaymentMethodRequest) (*RemovePaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePaymentMethod not implemented")
}
func (UnimplementedFinanceServiceServer) SaveAuthorization(context.Context, *SaveAuthorizationRequest) (*SaveAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAuthorization not implemented")
}
func (UnimplementedFinanceServiceServer) CaptureFunds(context.Context, *CaptureFundsRequest) (*CaptureFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureFunds not implemented")
}
func (UnimplementedFinanceServiceServer) GetPayroll(context.Context, *GetPayrollRequest) (*GetPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayroll not implemented")
}
func (UnimplementedFinanceServiceServer) mustEmbedUnimplementedFinanceServiceServer() {}

// UnsafeFinanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinanceServiceServer will
// result in compilation errors.
type UnsafeFinanceServiceServer interface {
	mustEmbedUnimplementedFinanceServiceServer()
}

func RegisterFinanceServiceServer(s grpc.ServiceRegistrar, srv FinanceServiceServer) {
	s.RegisterService(&FinanceService_ServiceDesc, srv)
}

func _FinanceService_StartCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).StartCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finance_service.FinanceService/StartCheckout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).StartCheckout(ctx, req.(*StartCheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_GetPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).GetPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finance_service.FinanceService/GetPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).GetPayments(ctx, req.(*GetPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_AddPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).AddPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finance_service.FinanceService/AddPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).AddPaymentMethod(ctx, req.(*AddPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_GetPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).GetPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finance_service.FinanceService/GetPaymentMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).GetPaymentMethods(ctx, req.(*GetPaymentMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_RemovePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).RemovePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finance_service.FinanceService/RemovePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).RemovePaymentMethod(ctx, req.(*RemovePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_SaveAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).SaveAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finance_service.FinanceService/SaveAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).SaveAuthorization(ctx, req.(*SaveAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_CaptureFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).CaptureFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finance_service.FinanceService/CaptureFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).CaptureFunds(ctx, req.(*CaptureFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_GetPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).GetPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finance_service.FinanceService/GetPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).GetPayroll(ctx, req.(*GetPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinanceService_ServiceDesc is the grpc.ServiceDesc for FinanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance_service.FinanceService",
	HandlerType: (*FinanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCheckout",
			Handler:    _FinanceService_StartCheckout_Handler,
		},
		{
			MethodName: "GetPayments",
			Handler:    _FinanceService_GetPayments_Handler,
		},
		{
			MethodName: "AddPaymentMethod",
			Handler:    _FinanceService_AddPaymentMethod_Handler,
		},
		{
			MethodName: "GetPaymentMethods",
			Handler:    _FinanceService_GetPaymentMethods_Handler,
		},
		{
			MethodName: "RemovePaymentMethod",
			Handler:    _FinanceService_RemovePaymentMethod_Handler,
		},
		{
			MethodName: "SaveAuthorization",
			Handler:    _FinanceService_SaveAuthorization_Handler,
		},
		{
			MethodName: "CaptureFunds",
			Handler:    _FinanceService_CaptureFunds_Handler,
		},
		{
			MethodName: "GetPayroll",
			Handler:    _FinanceService_GetPayroll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance_service.proto",
}
