// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `coordinator.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:coordinator_service.GetCurationRequest)
pub struct GetCurationRequest {
    // message fields
    // @@protoc_insertion_point(field:coordinator_service.GetCurationRequest.query)
    pub query: ::protobuf::MessageField<super::global::Query>,
    ///  st joun home with 4 beds for a group of 8 ranging between 200 - 500 
    ///  for the week. 
    // @@protoc_insertion_point(field:coordinator_service.GetCurationRequest.page_token)
    pub page_token: ::std::string::String,
    // @@protoc_insertion_point(field:coordinator_service.GetCurationRequest.page)
    pub page: i32,
    // @@protoc_insertion_point(field:coordinator_service.GetCurationRequest.page_size)
    pub page_size: i32,
    // special fields
    // @@protoc_insertion_point(special_field:coordinator_service.GetCurationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetCurationRequest {
    fn default() -> &'a GetCurationRequest {
        <GetCurationRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetCurationRequest {
    pub fn new() -> GetCurationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::global::Query>(
            "query",
            |m: &GetCurationRequest| { &m.query },
            |m: &mut GetCurationRequest| { &mut m.query },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page_token",
            |m: &GetCurationRequest| { &m.page_token },
            |m: &mut GetCurationRequest| { &mut m.page_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page",
            |m: &GetCurationRequest| { &m.page },
            |m: &mut GetCurationRequest| { &mut m.page },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page_size",
            |m: &GetCurationRequest| { &m.page_size },
            |m: &mut GetCurationRequest| { &mut m.page_size },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCurationRequest>(
            "GetCurationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetCurationRequest {
    const NAME: &'static str = "GetCurationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.query)?;
                },
                26 => {
                    self.page_token = is.read_string()?;
                },
                32 => {
                    self.page = is.read_int32()?;
                },
                40 => {
                    self.page_size = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.query.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        if self.page != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.page);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.page_size);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.query.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        if self.page != 0 {
            os.write_int32(4, self.page)?;
        }
        if self.page_size != 0 {
            os.write_int32(5, self.page_size)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetCurationRequest {
        GetCurationRequest::new()
    }

    fn clear(&mut self) {
        self.query.clear();
        self.page_token.clear();
        self.page = 0;
        self.page_size = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetCurationRequest {
        static instance: GetCurationRequest = GetCurationRequest {
            query: ::protobuf::MessageField::none(),
            page_token: ::std::string::String::new(),
            page: 0,
            page_size: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetCurationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetCurationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetCurationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCurationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11coordinator.proto\x12\x13coordinator_service\x1a\x0cglobal.proto\"\
    \x89\x01\n\x12GetCurationRequest\x12#\n\x05query\x18\x02\x20\x01(\x0b2\r\
    .global.QueryR\x05query\x12\x1d\n\npage_token\x18\x03\x20\x01(\tR\tpageT\
    oken\x12\x12\n\x04page\x18\x04\x20\x01(\x05R\x04page\x12\x1b\n\tpage_siz\
    e\x18\x05\x20\x01(\x05R\x08pageSize2\x14\n\x12CoordinatorServiceB;Z9gith\
    ub.com/tonychill/ifitu/apis/pb/go/coordinator_serviceJ\xc0\x06\n\x06\x12\
    \x04\0\0$\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x01\0\x1c\n\t\n\x02\x03\0\x12\x03\x02\0\x16\n\t\n\x01\x08\x12\x04\x03\0\
    \x04>\nw\n\x02\x08\x0b\x12\x04\x03\0\x04>\"k\x20https://cloud.google.com\
    /iam/docs/\n\x20https://docs.aws.amazon.com/IAM/latest/UserGuide/intro-s\
    tructure.html\n\n\n\n\x02\x06\0\x12\x04\x08\0\n\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\x08\x08\x1a\n\n\n\x02\x04\0\x12\x04\x0c\0$\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x0c\x08\x1a\n\x0b\n\x04\x04\0\x02\0\x12\x03\r\x02\x19\n\x0c\
    \n\x05\x04\0\x02\0\x06\x12\x03\r\x02\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\r\x0f\x14\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\r\x17\x18\nc\n\x04\
    \x04\0\x02\x01\x12\x03\x11\x02\x18\x1aV\x20st\x20joun\x20home\x20with\
    \x204\x20beds\x20for\x20a\x20group\x20of\x208\x20ranging\x20between\x202\
    00\x20-\x20500\x20\n\x20for\x20the\x20week.\x20\n\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x11\t\
    \x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x11\x16\x17\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x12\x02\x11\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x12\
    \x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x12\x08\x0c\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x12\x0f\x10\n\xbb\x02\n\x04\x04\0\x02\x03\x12\
    \x03\x13\x02\x16\"\xad\x02*\x20Example\x20query:\x20\n\x20\x20\"rate_ran\
    ge\":\x20\"[500-1000]\",\n\x20\x20\"rate_interval\":\x20\"hourly|daily|w\
    eekly|monthly\",\n\x20\x20\"rate_currency\":\x20\"USD|EUR|GBP|BTC|ETH\",\
    \n\x20\x20\"location_names\":\x20\"st.\x20john,\x20st.\x20thomas,\x20jam\
    aica,\x20...\",\n\x20\x20\"location_geos\":\x20\"[18.12345,64.35465],[18\
    .12345,64.35465],...\",\n\x20\x20\"location_raduis\":\x20\"50mi,25mi...\
    \",\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x13\x02\x07\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03\x13\x08\x11\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\
    \x13\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::global::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GetCurationRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
