// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `finance_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.StartCheckoutRequest)
pub struct StartCheckoutRequest {
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.StartCheckoutRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StartCheckoutRequest {
    fn default() -> &'a StartCheckoutRequest {
        <StartCheckoutRequest as ::protobuf::Message>::default_instance()
    }
}

impl StartCheckoutRequest {
    pub fn new() -> StartCheckoutRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StartCheckoutRequest>(
            "StartCheckoutRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StartCheckoutRequest {
    const NAME: &'static str = "StartCheckoutRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StartCheckoutRequest {
        StartCheckoutRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StartCheckoutRequest {
        static instance: StartCheckoutRequest = StartCheckoutRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StartCheckoutRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StartCheckoutRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StartCheckoutRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartCheckoutRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.StartCheckoutResponse)
pub struct StartCheckoutResponse {
    // message fields
    // @@protoc_insertion_point(field:finance_service.StartCheckoutResponse.session_link)
    pub session_link: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.StartCheckoutResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StartCheckoutResponse {
    fn default() -> &'a StartCheckoutResponse {
        <StartCheckoutResponse as ::protobuf::Message>::default_instance()
    }
}

impl StartCheckoutResponse {
    pub fn new() -> StartCheckoutResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "session_link",
            |m: &StartCheckoutResponse| { &m.session_link },
            |m: &mut StartCheckoutResponse| { &mut m.session_link },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StartCheckoutResponse>(
            "StartCheckoutResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StartCheckoutResponse {
    const NAME: &'static str = "StartCheckoutResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.session_link = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.session_link.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_link);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.session_link.is_empty() {
            os.write_string(1, &self.session_link)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StartCheckoutResponse {
        StartCheckoutResponse::new()
    }

    fn clear(&mut self) {
        self.session_link.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StartCheckoutResponse {
        static instance: StartCheckoutResponse = StartCheckoutResponse {
            session_link: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StartCheckoutResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StartCheckoutResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StartCheckoutResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartCheckoutResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.GetRatesRequest)
pub struct GetRatesRequest {
    // message fields
    // @@protoc_insertion_point(field:finance_service.GetRatesRequest.query)
    pub query: ::protobuf::MessageField<super::global::Query>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.GetRatesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetRatesRequest {
    fn default() -> &'a GetRatesRequest {
        <GetRatesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetRatesRequest {
    pub fn new() -> GetRatesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::global::Query>(
            "query",
            |m: &GetRatesRequest| { &m.query },
            |m: &mut GetRatesRequest| { &mut m.query },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetRatesRequest>(
            "GetRatesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetRatesRequest {
    const NAME: &'static str = "GetRatesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.query)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.query.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.query.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetRatesRequest {
        GetRatesRequest::new()
    }

    fn clear(&mut self) {
        self.query.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetRatesRequest {
        static instance: GetRatesRequest = GetRatesRequest {
            query: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetRatesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetRatesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetRatesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRatesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.GetRatesResponse)
pub struct GetRatesResponse {
    // message fields
    // @@protoc_insertion_point(field:finance_service.GetRatesResponse.rates)
    pub rates: ::std::vec::Vec<super::global::Rate>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.GetRatesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetRatesResponse {
    fn default() -> &'a GetRatesResponse {
        <GetRatesResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetRatesResponse {
    pub fn new() -> GetRatesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rates",
            |m: &GetRatesResponse| { &m.rates },
            |m: &mut GetRatesResponse| { &mut m.rates },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetRatesResponse>(
            "GetRatesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetRatesResponse {
    const NAME: &'static str = "GetRatesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rates.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rates {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetRatesResponse {
        GetRatesResponse::new()
    }

    fn clear(&mut self) {
        self.rates.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetRatesResponse {
        static instance: GetRatesResponse = GetRatesResponse {
            rates: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetRatesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetRatesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetRatesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRatesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.CreateRatesRequest)
pub struct CreateRatesRequest {
    // message fields
    // @@protoc_insertion_point(field:finance_service.CreateRatesRequest.rates)
    pub rates: ::std::vec::Vec<super::global::Rate>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.CreateRatesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateRatesRequest {
    fn default() -> &'a CreateRatesRequest {
        <CreateRatesRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateRatesRequest {
    pub fn new() -> CreateRatesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rates",
            |m: &CreateRatesRequest| { &m.rates },
            |m: &mut CreateRatesRequest| { &mut m.rates },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateRatesRequest>(
            "CreateRatesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateRatesRequest {
    const NAME: &'static str = "CreateRatesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rates.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rates {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateRatesRequest {
        CreateRatesRequest::new()
    }

    fn clear(&mut self) {
        self.rates.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateRatesRequest {
        static instance: CreateRatesRequest = CreateRatesRequest {
            rates: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateRatesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateRatesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateRatesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRatesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.CreateRatesResponse)
pub struct CreateRatesResponse {
    // message fields
    // @@protoc_insertion_point(field:finance_service.CreateRatesResponse.rate_ids)
    pub rate_ids: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.CreateRatesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateRatesResponse {
    fn default() -> &'a CreateRatesResponse {
        <CreateRatesResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateRatesResponse {
    pub fn new() -> CreateRatesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rate_ids",
            |m: &CreateRatesResponse| { &m.rate_ids },
            |m: &mut CreateRatesResponse| { &mut m.rate_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateRatesResponse>(
            "CreateRatesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateRatesResponse {
    const NAME: &'static str = "CreateRatesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rate_ids.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rate_ids {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rate_ids {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateRatesResponse {
        CreateRatesResponse::new()
    }

    fn clear(&mut self) {
        self.rate_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateRatesResponse {
        static instance: CreateRatesResponse = CreateRatesResponse {
            rate_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateRatesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateRatesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateRatesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRatesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.AddPaymentMethodRequest)
pub struct AddPaymentMethodRequest {
    // message fields
    // @@protoc_insertion_point(field:finance_service.AddPaymentMethodRequest.payment_method)
    pub payment_method: ::protobuf::MessageField<super::finance::PaymentMethod>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.AddPaymentMethodRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddPaymentMethodRequest {
    fn default() -> &'a AddPaymentMethodRequest {
        <AddPaymentMethodRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddPaymentMethodRequest {
    pub fn new() -> AddPaymentMethodRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::finance::PaymentMethod>(
            "payment_method",
            |m: &AddPaymentMethodRequest| { &m.payment_method },
            |m: &mut AddPaymentMethodRequest| { &mut m.payment_method },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddPaymentMethodRequest>(
            "AddPaymentMethodRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddPaymentMethodRequest {
    const NAME: &'static str = "AddPaymentMethodRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.payment_method)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.payment_method.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.payment_method.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddPaymentMethodRequest {
        AddPaymentMethodRequest::new()
    }

    fn clear(&mut self) {
        self.payment_method.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddPaymentMethodRequest {
        static instance: AddPaymentMethodRequest = AddPaymentMethodRequest {
            payment_method: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddPaymentMethodRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddPaymentMethodRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddPaymentMethodRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddPaymentMethodRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.RemovePaymentMethodRequest)
pub struct RemovePaymentMethodRequest {
    // message fields
    // @@protoc_insertion_point(field:finance_service.RemovePaymentMethodRequest.guest_id)
    pub guest_id: ::std::string::String,
    // @@protoc_insertion_point(field:finance_service.RemovePaymentMethodRequest.payment_method_id)
    pub payment_method_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.RemovePaymentMethodRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemovePaymentMethodRequest {
    fn default() -> &'a RemovePaymentMethodRequest {
        <RemovePaymentMethodRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemovePaymentMethodRequest {
    pub fn new() -> RemovePaymentMethodRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "guest_id",
            |m: &RemovePaymentMethodRequest| { &m.guest_id },
            |m: &mut RemovePaymentMethodRequest| { &mut m.guest_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payment_method_id",
            |m: &RemovePaymentMethodRequest| { &m.payment_method_id },
            |m: &mut RemovePaymentMethodRequest| { &mut m.payment_method_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RemovePaymentMethodRequest>(
            "RemovePaymentMethodRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RemovePaymentMethodRequest {
    const NAME: &'static str = "RemovePaymentMethodRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.guest_id = is.read_string()?;
                },
                18 => {
                    self.payment_method_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.guest_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.guest_id);
        }
        if !self.payment_method_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.payment_method_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.guest_id.is_empty() {
            os.write_string(1, &self.guest_id)?;
        }
        if !self.payment_method_id.is_empty() {
            os.write_string(2, &self.payment_method_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemovePaymentMethodRequest {
        RemovePaymentMethodRequest::new()
    }

    fn clear(&mut self) {
        self.guest_id.clear();
        self.payment_method_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemovePaymentMethodRequest {
        static instance: RemovePaymentMethodRequest = RemovePaymentMethodRequest {
            guest_id: ::std::string::String::new(),
            payment_method_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RemovePaymentMethodRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RemovePaymentMethodRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RemovePaymentMethodRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemovePaymentMethodRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.GetPaymentMethodsRequest)
pub struct GetPaymentMethodsRequest {
    // message fields
    // @@protoc_insertion_point(field:finance_service.GetPaymentMethodsRequest.query)
    pub query: ::protobuf::MessageField<super::global::Query>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.GetPaymentMethodsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPaymentMethodsRequest {
    fn default() -> &'a GetPaymentMethodsRequest {
        <GetPaymentMethodsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPaymentMethodsRequest {
    pub fn new() -> GetPaymentMethodsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::global::Query>(
            "query",
            |m: &GetPaymentMethodsRequest| { &m.query },
            |m: &mut GetPaymentMethodsRequest| { &mut m.query },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPaymentMethodsRequest>(
            "GetPaymentMethodsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPaymentMethodsRequest {
    const NAME: &'static str = "GetPaymentMethodsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.query)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.query.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.query.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPaymentMethodsRequest {
        GetPaymentMethodsRequest::new()
    }

    fn clear(&mut self) {
        self.query.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPaymentMethodsRequest {
        static instance: GetPaymentMethodsRequest = GetPaymentMethodsRequest {
            query: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPaymentMethodsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPaymentMethodsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPaymentMethodsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaymentMethodsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.GetPaymentMethodsResponse)
pub struct GetPaymentMethodsResponse {
    // message fields
    // @@protoc_insertion_point(field:finance_service.GetPaymentMethodsResponse.payment_methods)
    pub payment_methods: ::std::vec::Vec<super::finance::PaymentMethod>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.GetPaymentMethodsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPaymentMethodsResponse {
    fn default() -> &'a GetPaymentMethodsResponse {
        <GetPaymentMethodsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPaymentMethodsResponse {
    pub fn new() -> GetPaymentMethodsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "payment_methods",
            |m: &GetPaymentMethodsResponse| { &m.payment_methods },
            |m: &mut GetPaymentMethodsResponse| { &mut m.payment_methods },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPaymentMethodsResponse>(
            "GetPaymentMethodsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPaymentMethodsResponse {
    const NAME: &'static str = "GetPaymentMethodsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.payment_methods.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.payment_methods {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.payment_methods {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPaymentMethodsResponse {
        GetPaymentMethodsResponse::new()
    }

    fn clear(&mut self) {
        self.payment_methods.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPaymentMethodsResponse {
        static instance: GetPaymentMethodsResponse = GetPaymentMethodsResponse {
            payment_methods: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPaymentMethodsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPaymentMethodsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPaymentMethodsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaymentMethodsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.AddPaymentMethodResponse)
pub struct AddPaymentMethodResponse {
    // message fields
    // @@protoc_insertion_point(field:finance_service.AddPaymentMethodResponse.payment_method)
    pub payment_method: ::protobuf::MessageField<super::finance::PaymentMethod>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.AddPaymentMethodResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddPaymentMethodResponse {
    fn default() -> &'a AddPaymentMethodResponse {
        <AddPaymentMethodResponse as ::protobuf::Message>::default_instance()
    }
}

impl AddPaymentMethodResponse {
    pub fn new() -> AddPaymentMethodResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::finance::PaymentMethod>(
            "payment_method",
            |m: &AddPaymentMethodResponse| { &m.payment_method },
            |m: &mut AddPaymentMethodResponse| { &mut m.payment_method },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddPaymentMethodResponse>(
            "AddPaymentMethodResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddPaymentMethodResponse {
    const NAME: &'static str = "AddPaymentMethodResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.payment_method)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.payment_method.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.payment_method.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddPaymentMethodResponse {
        AddPaymentMethodResponse::new()
    }

    fn clear(&mut self) {
        self.payment_method.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddPaymentMethodResponse {
        static instance: AddPaymentMethodResponse = AddPaymentMethodResponse {
            payment_method: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddPaymentMethodResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddPaymentMethodResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddPaymentMethodResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddPaymentMethodResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.RemovePaymentMethodResponse)
pub struct RemovePaymentMethodResponse {
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.RemovePaymentMethodResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemovePaymentMethodResponse {
    fn default() -> &'a RemovePaymentMethodResponse {
        <RemovePaymentMethodResponse as ::protobuf::Message>::default_instance()
    }
}

impl RemovePaymentMethodResponse {
    pub fn new() -> RemovePaymentMethodResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RemovePaymentMethodResponse>(
            "RemovePaymentMethodResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RemovePaymentMethodResponse {
    const NAME: &'static str = "RemovePaymentMethodResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemovePaymentMethodResponse {
        RemovePaymentMethodResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemovePaymentMethodResponse {
        static instance: RemovePaymentMethodResponse = RemovePaymentMethodResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RemovePaymentMethodResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RemovePaymentMethodResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RemovePaymentMethodResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemovePaymentMethodResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.SaveAuthorizationRequest)
pub struct SaveAuthorizationRequest {
    // message fields
    // @@protoc_insertion_point(field:finance_service.SaveAuthorizationRequest.guest_id)
    pub guest_id: ::std::string::String,
    // @@protoc_insertion_point(field:finance_service.SaveAuthorizationRequest.payment_id)
    pub payment_id: ::std::string::String,
    // @@protoc_insertion_point(field:finance_service.SaveAuthorizationRequest.journey_id)
    pub journey_id: ::std::string::String,
    // @@protoc_insertion_point(field:finance_service.SaveAuthorizationRequest.amount)
    pub amount: i64,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.SaveAuthorizationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveAuthorizationRequest {
    fn default() -> &'a SaveAuthorizationRequest {
        <SaveAuthorizationRequest as ::protobuf::Message>::default_instance()
    }
}

impl SaveAuthorizationRequest {
    pub fn new() -> SaveAuthorizationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "guest_id",
            |m: &SaveAuthorizationRequest| { &m.guest_id },
            |m: &mut SaveAuthorizationRequest| { &mut m.guest_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payment_id",
            |m: &SaveAuthorizationRequest| { &m.payment_id },
            |m: &mut SaveAuthorizationRequest| { &mut m.payment_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "journey_id",
            |m: &SaveAuthorizationRequest| { &m.journey_id },
            |m: &mut SaveAuthorizationRequest| { &mut m.journey_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &SaveAuthorizationRequest| { &m.amount },
            |m: &mut SaveAuthorizationRequest| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveAuthorizationRequest>(
            "SaveAuthorizationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveAuthorizationRequest {
    const NAME: &'static str = "SaveAuthorizationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.guest_id = is.read_string()?;
                },
                18 => {
                    self.payment_id = is.read_string()?;
                },
                26 => {
                    self.journey_id = is.read_string()?;
                },
                32 => {
                    self.amount = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.guest_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.guest_id);
        }
        if !self.payment_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.payment_id);
        }
        if !self.journey_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.journey_id);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.guest_id.is_empty() {
            os.write_string(1, &self.guest_id)?;
        }
        if !self.payment_id.is_empty() {
            os.write_string(2, &self.payment_id)?;
        }
        if !self.journey_id.is_empty() {
            os.write_string(3, &self.journey_id)?;
        }
        if self.amount != 0 {
            os.write_int64(4, self.amount)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveAuthorizationRequest {
        SaveAuthorizationRequest::new()
    }

    fn clear(&mut self) {
        self.guest_id.clear();
        self.payment_id.clear();
        self.journey_id.clear();
        self.amount = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveAuthorizationRequest {
        static instance: SaveAuthorizationRequest = SaveAuthorizationRequest {
            guest_id: ::std::string::String::new(),
            payment_id: ::std::string::String::new(),
            journey_id: ::std::string::String::new(),
            amount: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveAuthorizationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveAuthorizationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveAuthorizationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveAuthorizationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.SaveAuthorizationResponse)
pub struct SaveAuthorizationResponse {
    // message fields
    // @@protoc_insertion_point(field:finance_service.SaveAuthorizationResponse.payment)
    pub payment: ::protobuf::MessageField<super::finance::Payment>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.SaveAuthorizationResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveAuthorizationResponse {
    fn default() -> &'a SaveAuthorizationResponse {
        <SaveAuthorizationResponse as ::protobuf::Message>::default_instance()
    }
}

impl SaveAuthorizationResponse {
    pub fn new() -> SaveAuthorizationResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::finance::Payment>(
            "payment",
            |m: &SaveAuthorizationResponse| { &m.payment },
            |m: &mut SaveAuthorizationResponse| { &mut m.payment },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveAuthorizationResponse>(
            "SaveAuthorizationResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveAuthorizationResponse {
    const NAME: &'static str = "SaveAuthorizationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.payment)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.payment.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.payment.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveAuthorizationResponse {
        SaveAuthorizationResponse::new()
    }

    fn clear(&mut self) {
        self.payment.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveAuthorizationResponse {
        static instance: SaveAuthorizationResponse = SaveAuthorizationResponse {
            payment: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveAuthorizationResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveAuthorizationResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveAuthorizationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveAuthorizationResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.CaptureFundsRequest)
pub struct CaptureFundsRequest {
    // message fields
    // @@protoc_insertion_point(field:finance_service.CaptureFundsRequest.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:finance_service.CaptureFundsRequest.amount)
    pub amount: i64,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.CaptureFundsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CaptureFundsRequest {
    fn default() -> &'a CaptureFundsRequest {
        <CaptureFundsRequest as ::protobuf::Message>::default_instance()
    }
}

impl CaptureFundsRequest {
    pub fn new() -> CaptureFundsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &CaptureFundsRequest| { &m.id },
            |m: &mut CaptureFundsRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &CaptureFundsRequest| { &m.amount },
            |m: &mut CaptureFundsRequest| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CaptureFundsRequest>(
            "CaptureFundsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CaptureFundsRequest {
    const NAME: &'static str = "CaptureFundsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                16 => {
                    self.amount = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.amount != 0 {
            os.write_int64(2, self.amount)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CaptureFundsRequest {
        CaptureFundsRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.amount = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CaptureFundsRequest {
        static instance: CaptureFundsRequest = CaptureFundsRequest {
            id: ::std::string::String::new(),
            amount: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CaptureFundsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CaptureFundsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CaptureFundsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CaptureFundsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.CaptureFundsResponse)
pub struct CaptureFundsResponse {
    // message fields
    // @@protoc_insertion_point(field:finance_service.CaptureFundsResponse.payment)
    pub payment: ::protobuf::MessageField<super::finance::Payment>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.CaptureFundsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CaptureFundsResponse {
    fn default() -> &'a CaptureFundsResponse {
        <CaptureFundsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CaptureFundsResponse {
    pub fn new() -> CaptureFundsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::finance::Payment>(
            "payment",
            |m: &CaptureFundsResponse| { &m.payment },
            |m: &mut CaptureFundsResponse| { &mut m.payment },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CaptureFundsResponse>(
            "CaptureFundsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CaptureFundsResponse {
    const NAME: &'static str = "CaptureFundsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.payment)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.payment.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.payment.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CaptureFundsResponse {
        CaptureFundsResponse::new()
    }

    fn clear(&mut self) {
        self.payment.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CaptureFundsResponse {
        static instance: CaptureFundsResponse = CaptureFundsResponse {
            payment: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CaptureFundsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CaptureFundsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CaptureFundsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CaptureFundsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.GetPayrollRequest)
pub struct GetPayrollRequest {
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.GetPayrollRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPayrollRequest {
    fn default() -> &'a GetPayrollRequest {
        <GetPayrollRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPayrollRequest {
    pub fn new() -> GetPayrollRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPayrollRequest>(
            "GetPayrollRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPayrollRequest {
    const NAME: &'static str = "GetPayrollRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPayrollRequest {
        GetPayrollRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPayrollRequest {
        static instance: GetPayrollRequest = GetPayrollRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPayrollRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPayrollRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPayrollRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPayrollRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.GetPayrollResponse)
pub struct GetPayrollResponse {
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.GetPayrollResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPayrollResponse {
    fn default() -> &'a GetPayrollResponse {
        <GetPayrollResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPayrollResponse {
    pub fn new() -> GetPayrollResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPayrollResponse>(
            "GetPayrollResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPayrollResponse {
    const NAME: &'static str = "GetPayrollResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPayrollResponse {
        GetPayrollResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPayrollResponse {
        static instance: GetPayrollResponse = GetPayrollResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPayrollResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPayrollResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPayrollResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPayrollResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.GetPaymentsRequest)
pub struct GetPaymentsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.GetPaymentsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPaymentsRequest {
    fn default() -> &'a GetPaymentsRequest {
        <GetPaymentsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPaymentsRequest {
    pub fn new() -> GetPaymentsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPaymentsRequest>(
            "GetPaymentsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPaymentsRequest {
    const NAME: &'static str = "GetPaymentsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPaymentsRequest {
        GetPaymentsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPaymentsRequest {
        static instance: GetPaymentsRequest = GetPaymentsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPaymentsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPaymentsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPaymentsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaymentsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.GetPaymentsResponse)
pub struct GetPaymentsResponse {
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.GetPaymentsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPaymentsResponse {
    fn default() -> &'a GetPaymentsResponse {
        <GetPaymentsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPaymentsResponse {
    pub fn new() -> GetPaymentsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPaymentsResponse>(
            "GetPaymentsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPaymentsResponse {
    const NAME: &'static str = "GetPaymentsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPaymentsResponse {
        GetPaymentsResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPaymentsResponse {
        static instance: GetPaymentsResponse = GetPaymentsResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPaymentsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPaymentsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPaymentsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaymentsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.GetTransactionRequest)
pub struct GetTransactionRequest {
    // message fields
    // @@protoc_insertion_point(field:finance_service.GetTransactionRequest.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:finance_service.GetTransactionRequest.query)
    pub query: ::protobuf::MessageField<super::global::Query>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.GetTransactionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTransactionRequest {
    fn default() -> &'a GetTransactionRequest {
        <GetTransactionRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTransactionRequest {
    pub fn new() -> GetTransactionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &GetTransactionRequest| { &m.id },
            |m: &mut GetTransactionRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::global::Query>(
            "query",
            |m: &GetTransactionRequest| { &m.query },
            |m: &mut GetTransactionRequest| { &mut m.query },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTransactionRequest>(
            "GetTransactionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTransactionRequest {
    const NAME: &'static str = "GetTransactionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.query)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let Some(v) = self.query.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let Some(v) = self.query.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTransactionRequest {
        GetTransactionRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.query.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTransactionRequest {
        static instance: GetTransactionRequest = GetTransactionRequest {
            id: ::std::string::String::new(),
            query: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTransactionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTransactionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTransactionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTransactionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:finance_service.GetTransactionResponse)
pub struct GetTransactionResponse {
    // message fields
    // @@protoc_insertion_point(field:finance_service.GetTransactionResponse.transactions)
    pub transactions: ::std::vec::Vec<super::finance::Transaction>,
    // special fields
    // @@protoc_insertion_point(special_field:finance_service.GetTransactionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTransactionResponse {
    fn default() -> &'a GetTransactionResponse {
        <GetTransactionResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTransactionResponse {
    pub fn new() -> GetTransactionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "transactions",
            |m: &GetTransactionResponse| { &m.transactions },
            |m: &mut GetTransactionResponse| { &mut m.transactions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTransactionResponse>(
            "GetTransactionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTransactionResponse {
    const NAME: &'static str = "GetTransactionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.transactions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.transactions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTransactionResponse {
        GetTransactionResponse::new()
    }

    fn clear(&mut self) {
        self.transactions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTransactionResponse {
        static instance: GetTransactionResponse = GetTransactionResponse {
            transactions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTransactionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTransactionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTransactionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTransactionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15finance_service.proto\x12\x0ffinance_service\x1a\rfinance.proto\
    \x1a\x0cglobal.proto\"\x16\n\x14StartCheckoutRequest\":\n\x15StartChecko\
    utResponse\x12!\n\x0csession_link\x18\x01\x20\x01(\tR\x0bsessionLink\"6\
    \n\x0fGetRatesRequest\x12#\n\x05query\x18\x01\x20\x01(\x0b2\r.global.Que\
    ryR\x05query\"6\n\x10GetRatesResponse\x12\"\n\x05rates\x18\x01\x20\x03(\
    \x0b2\x0c.global.RateR\x05rates\"8\n\x12CreateRatesRequest\x12\"\n\x05ra\
    tes\x18\x01\x20\x03(\x0b2\x0c.global.RateR\x05rates\"0\n\x13CreateRatesR\
    esponse\x12\x19\n\x08rate_ids\x18\x01\x20\x03(\tR\x07rateIds\"X\n\x17Add\
    PaymentMethodRequest\x12=\n\x0epayment_method\x18\x01\x20\x01(\x0b2\x16.\
    finance.PaymentMethodR\rpaymentMethod\"c\n\x1aRemovePaymentMethodRequest\
    \x12\x19\n\x08guest_id\x18\x01\x20\x01(\tR\x07guestId\x12*\n\x11payment_\
    method_id\x18\x02\x20\x01(\tR\x0fpaymentMethodId\"?\n\x18GetPaymentMetho\
    dsRequest\x12#\n\x05query\x18\x01\x20\x01(\x0b2\r.global.QueryR\x05query\
    \"\\\n\x19GetPaymentMethodsResponse\x12?\n\x0fpayment_methods\x18\x01\
    \x20\x03(\x0b2\x16.finance.PaymentMethodR\x0epaymentMethods\"Y\n\x18AddP\
    aymentMethodResponse\x12=\n\x0epayment_method\x18\x01\x20\x01(\x0b2\x16.\
    finance.PaymentMethodR\rpaymentMethod\"\x1d\n\x1bRemovePaymentMethodResp\
    onse\"\x8b\x01\n\x18SaveAuthorizationRequest\x12\x19\n\x08guest_id\x18\
    \x01\x20\x01(\tR\x07guestId\x12\x1d\n\npayment_id\x18\x02\x20\x01(\tR\tp\
    aymentId\x12\x1d\n\njourney_id\x18\x03\x20\x01(\tR\tjourneyId\x12\x16\n\
    \x06amount\x18\x04\x20\x01(\x03R\x06amount\"G\n\x19SaveAuthorizationResp\
    onse\x12*\n\x07payment\x18\x01\x20\x01(\x0b2\x10.finance.PaymentR\x07pay\
    ment\"=\n\x13CaptureFundsRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02\
    id\x12\x16\n\x06amount\x18\x02\x20\x01(\x03R\x06amount\"B\n\x14CaptureFu\
    ndsResponse\x12*\n\x07payment\x18\x01\x20\x01(\x0b2\x10.finance.PaymentR\
    \x07payment\"\x13\n\x11GetPayrollRequest\"\x14\n\x12GetPayrollResponse\"\
    \x14\n\x12GetPaymentsRequest\"\x15\n\x13GetPaymentsResponse\"L\n\x15GetT\
    ransactionRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12#\n\x05qu\
    ery\x18\x02\x20\x01(\x0b2\r.global.QueryR\x05query\"R\n\x16GetTransactio\
    nResponse\x128\n\x0ctransactions\x18\x01\x20\x03(\x0b2\x14.finance.Trans\
    actionR\x0ctransactions2\xb1\x06\n\x0eFinanceService\x12^\n\rStartChecko\
    ut\x12%.finance_service.StartCheckoutRequest\x1a&.finance_service.StartC\
    heckoutResponse\x12X\n\x0bGetPayments\x12#.finance_service.GetPaymentsRe\
    quest\x1a$.finance_service.GetPaymentsResponse\x12g\n\x10AddPaymentMetho\
    d\x12(.finance_service.AddPaymentMethodRequest\x1a).finance_service.AddP\
    aymentMethodResponse\x12j\n\x11GetPaymentMethods\x12).finance_service.Ge\
    tPaymentMethodsRequest\x1a*.finance_service.GetPaymentMethodsResponse\
    \x12p\n\x13RemovePaymentMethod\x12+.finance_service.RemovePaymentMethodR\
    equest\x1a,.finance_service.RemovePaymentMethodResponse\x12j\n\x11SaveAu\
    thorization\x12).finance_service.SaveAuthorizationRequest\x1a*.finance_s\
    ervice.SaveAuthorizationResponse\x12[\n\x0cCaptureFunds\x12$.finance_ser\
    vice.CaptureFundsRequest\x1a%.finance_service.CaptureFundsResponse\x12U\
    \n\nGetPayroll\x12\".finance_service.GetPayrollRequest\x1a#.finance_serv\
    ice.GetPayrollResponseB7Z5github.com/tonychill/ifitu/apis/pb/go/finance_\
    serviceJ\xab\x12\n\x06\x12\x04\0\0o\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x01\0\x18\n\t\n\x02\x03\0\x12\x03\x02\0\x17\n\t\
    \n\x02\x03\x01\x12\x03\x03\0\x16\n\x08\n\x01\x08\x12\x03\x04\0L\n\t\n\
    \x02\x08\x0b\x12\x03\x04\0L\n\n\n\x02\x06\0\x12\x04\x07\0\x16\x01\n\n\n\
    \x03\x06\0\x01\x12\x03\x07\x08\x16\n\x0b\n\x04\x06\0\x02\0\x12\x03\t\x02\
    J\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\t\x06\x13\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\t\x14(\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\t3H\n\x0b\n\x04\
    \x06\0\x02\x01\x12\x03\n\x02D\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\n\
    \x06\x11\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\n\x12$\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03\n/B\n\x0c\n\x04\x06\0\x02\x02\x12\x04\x0b\x02\x0c'\
    \n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x0b\x06\x16\n\x0c\n\x05\x06\0\x02\
    \x02\x02\x12\x03\x0b\x17.\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x0c\r%\n\
    \x0c\n\x04\x06\0\x02\x03\x12\x04\r\x02\x0e(\n\x0c\n\x05\x06\0\x02\x03\
    \x01\x12\x03\r\x06\x17\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\r\x180\n\
    \x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x0e\r&\n\x0c\n\x04\x06\0\x02\x04\
    \x12\x04\x0f\x02\x10*\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x0f\x06\x19\
    \n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x0f\x1a4\n\x0c\n\x05\x06\0\x02\
    \x04\x03\x12\x03\x10\r(\n\x0c\n\x04\x06\0\x02\x05\x12\x04\x11\x02\x12&\n\
    \x0c\n\x05\x06\0\x02\x05\x01\x12\x03\x11\x06\x17\n\x0c\n\x05\x06\0\x02\
    \x05\x02\x12\x03\x11\x180\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03\x12\x0b$\
    \n\x0b\n\x04\x06\0\x02\x06\x12\x03\x13\x02G\n\x0c\n\x05\x06\0\x02\x06\
    \x01\x12\x03\x13\x06\x12\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03\x13\x13&\
    \n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03\x131E\n\x0b\n\x04\x06\0\x02\x07\
    \x12\x03\x14\x02A\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03\x14\x06\x10\n\
    \x0c\n\x05\x06\0\x02\x07\x02\x12\x03\x14\x11\"\n\x0c\n\x05\x06\0\x02\x07\
    \x03\x12\x03\x14-?\n\n\n\x02\x04\0\x12\x04\x18\0\x1a\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x18\x08\x1c\n\n\n\x02\x04\x01\x12\x04\x1b\0\x1d\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x1b\x08\x1d\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x1c\x02\x1a\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1c\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x1c\t\x15\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x1c\x18\x19\n\n\n\x02\x04\x02\x12\x04\x20\0\"\x01\n\n\n\x03\x04\
    \x02\x01\x12\x03\x20\x08\x17\n\x0b\n\x04\x04\x02\x02\0\x12\x03!\x02\x19\
    \n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03!\x02\x0e\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03!\x0f\x14\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03!\x17\x18\n\
    \n\n\x02\x04\x03\x12\x04#\0%\x01\n\n\n\x03\x04\x03\x01\x12\x03#\x08\x18\
    \n\x0b\n\x04\x04\x03\x02\0\x12\x03$\x02!\n\x0c\n\x05\x04\x03\x02\0\x04\
    \x12\x03$\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03$\x0b\x16\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03$\x17\x1c\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03$\x1f\x20\n\n\n\x02\x04\x04\x12\x04'\0)\x01\n\n\n\x03\x04\x04\
    \x01\x12\x03'\x08\x1a\n\x0b\n\x04\x04\x04\x02\0\x12\x03(\x02!\n\x0c\n\
    \x05\x04\x04\x02\0\x04\x12\x03(\x02\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\
    \x03(\x0b\x16\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03(\x17\x1c\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03(\x1f\x20\n\n\n\x02\x04\x05\x12\x04+\0-\x01\n\
    \n\n\x03\x04\x05\x01\x12\x03+\x08\x1b\n\x0b\n\x04\x04\x05\x02\0\x12\x03,\
    \x02\x1f\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03,\x02\n\n\x0c\n\x05\x04\
    \x05\x02\0\x05\x12\x03,\x0b\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03,\
    \x12\x1a\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03,\x1d\x1e\n\n\n\x02\x04\
    \x06\x12\x04/\01\x01\n\n\n\x03\x04\x06\x01\x12\x03/\x08\x1f\n\x0b\n\x04\
    \x04\x06\x02\0\x12\x030\x02+\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x030\x02\
    \x17\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x030\x18&\n\x0c\n\x05\x04\x06\x02\
    \0\x03\x12\x030)*\n\n\n\x02\x04\x07\x12\x043\06\x01\n\n\n\x03\x04\x07\
    \x01\x12\x033\x08\"\n\x0b\n\x04\x04\x07\x02\0\x12\x034\x02\x16\n\x0c\n\
    \x05\x04\x07\x02\0\x05\x12\x034\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x034\t\x11\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x034\x14\x15\n\x0b\n\
    \x04\x04\x07\x02\x01\x12\x035\x02\x1e\n\x0c\n\x05\x04\x07\x02\x01\x05\
    \x12\x035\x02\x08\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x035\t\x1a\n\x0c\n\
    \x05\x04\x07\x02\x01\x03\x12\x035\x1c\x1d\n\n\n\x02\x04\x08\x12\x048\0:\
    \x01\n\n\n\x03\x04\x08\x01\x12\x038\x08\x20\n\x0b\n\x04\x04\x08\x02\0\
    \x12\x039\x02\x19\n\x0c\n\x05\x04\x08\x02\0\x06\x12\x039\x02\x0e\n\x0c\n\
    \x05\x04\x08\x02\0\x01\x12\x039\x0f\x14\n\x0c\n\x05\x04\x08\x02\0\x03\
    \x12\x039\x17\x18\n\n\n\x02\x04\t\x12\x04<\0>\x01\n\n\n\x03\x04\t\x01\
    \x12\x03<\x08!\n\x0b\n\x04\x04\t\x02\0\x12\x03=\x025\n\x0c\n\x05\x04\t\
    \x02\0\x04\x12\x03=\x02\n\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03=\x0b\x20\n\
    \x0c\n\x05\x04\t\x02\0\x01\x12\x03=!0\n\x0c\n\x05\x04\t\x02\0\x03\x12\
    \x03=34\n\n\n\x02\x04\n\x12\x04@\0B\x01\n\n\n\x03\x04\n\x01\x12\x03@\x08\
    \x20\n\x0b\n\x04\x04\n\x02\0\x12\x03A\x02+\n\x0c\n\x05\x04\n\x02\0\x06\
    \x12\x03A\x02\x17\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03A\x18&\n\x0c\n\x05\
    \x04\n\x02\0\x03\x12\x03A)*\n\n\n\x02\x04\x0b\x12\x04D\0E\x01\n\n\n\x03\
    \x04\x0b\x01\x12\x03D\x08#\n\n\n\x02\x04\x0c\x12\x04G\0L\x01\n\n\n\x03\
    \x04\x0c\x01\x12\x03G\x08\x20\n\x0b\n\x04\x04\x0c\x02\0\x12\x03H\x02\x16\
    \n\x0c\n\x05\x04\x0c\x02\0\x05\x12\x03H\x02\x08\n\x0c\n\x05\x04\x0c\x02\
    \0\x01\x12\x03H\t\x11\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03H\x14\x15\n\
    \x0b\n\x04\x04\x0c\x02\x01\x12\x03I\x02\x18\n\x0c\n\x05\x04\x0c\x02\x01\
    \x05\x12\x03I\x02\x08\n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\x03I\t\x13\n\
    \x0c\n\x05\x04\x0c\x02\x01\x03\x12\x03I\x16\x17\n\x0b\n\x04\x04\x0c\x02\
    \x02\x12\x03J\x02\x18\n\x0c\n\x05\x04\x0c\x02\x02\x05\x12\x03J\x02\x08\n\
    \x0c\n\x05\x04\x0c\x02\x02\x01\x12\x03J\t\x13\n\x0c\n\x05\x04\x0c\x02\
    \x02\x03\x12\x03J\x16\x17\n\x0b\n\x04\x04\x0c\x02\x03\x12\x03K\x02\x14\n\
    \x0c\n\x05\x04\x0c\x02\x03\x05\x12\x03K\x02\x07\n\x0c\n\x05\x04\x0c\x02\
    \x03\x01\x12\x03K\t\x0f\n\x0c\n\x05\x04\x0c\x02\x03\x03\x12\x03K\x12\x13\
    \n\n\n\x02\x04\r\x12\x04N\0P\x01\n\n\n\x03\x04\r\x01\x12\x03N\x08!\n\x0b\
    \n\x04\x04\r\x02\0\x12\x03O\x02\x1e\n\x0c\n\x05\x04\r\x02\0\x06\x12\x03O\
    \x02\x11\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03O\x12\x19\n\x0c\n\x05\x04\r\
    \x02\0\x03\x12\x03O\x1c\x1d\n\n\n\x02\x04\x0e\x12\x04R\0U\x01\n\n\n\x03\
    \x04\x0e\x01\x12\x03R\x08\x1b\n\x0b\n\x04\x04\x0e\x02\0\x12\x03S\x02\x10\
    \n\x0c\n\x05\x04\x0e\x02\0\x05\x12\x03S\x02\x08\n\x0c\n\x05\x04\x0e\x02\
    \0\x01\x12\x03S\t\x0b\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03S\x0e\x0f\n\
    \x0b\n\x04\x04\x0e\x02\x01\x12\x03T\x02\x14\n\x0c\n\x05\x04\x0e\x02\x01\
    \x05\x12\x03T\x02\x07\n\x0c\n\x05\x04\x0e\x02\x01\x01\x12\x03T\t\x0f\n\
    \x0c\n\x05\x04\x0e\x02\x01\x03\x12\x03T\x12\x13\n\n\n\x02\x04\x0f\x12\
    \x04W\0Y\x01\n\n\n\x03\x04\x0f\x01\x12\x03W\x08\x1c\n\x0b\n\x04\x04\x0f\
    \x02\0\x12\x03X\x02\x1e\n\x0c\n\x05\x04\x0f\x02\0\x06\x12\x03X\x02\x11\n\
    \x0c\n\x05\x04\x0f\x02\0\x01\x12\x03X\x12\x19\n\x0c\n\x05\x04\x0f\x02\0\
    \x03\x12\x03X\x1c\x1d\n\n\n\x02\x04\x10\x12\x04[\0]\x01\n\n\n\x03\x04\
    \x10\x01\x12\x03[\x08\x19\n\n\n\x02\x04\x11\x12\x04^\0`\x01\n\n\n\x03\
    \x04\x11\x01\x12\x03^\x08\x1a\n\n\n\x02\x04\x12\x12\x04a\0c\x01\n\n\n\
    \x03\x04\x12\x01\x12\x03a\x08\x1a\n\n\n\x02\x04\x13\x12\x04d\0f\x01\n\n\
    \n\x03\x04\x13\x01\x12\x03d\x08\x1b\n\n\n\x02\x04\x14\x12\x04i\0l\x01\n\
    \n\n\x03\x04\x14\x01\x12\x03i\x08\x1d\n\x0b\n\x04\x04\x14\x02\0\x12\x03j\
    \x02\x10\n\x0c\n\x05\x04\x14\x02\0\x05\x12\x03j\x02\x08\n\x0c\n\x05\x04\
    \x14\x02\0\x01\x12\x03j\t\x0b\n\x0c\n\x05\x04\x14\x02\0\x03\x12\x03j\x0e\
    \x0f\n\x0b\n\x04\x04\x14\x02\x01\x12\x03k\x02\x19\n\x0c\n\x05\x04\x14\
    \x02\x01\x06\x12\x03k\x02\x0e\n\x0c\n\x05\x04\x14\x02\x01\x01\x12\x03k\
    \x0f\x14\n\x0c\n\x05\x04\x14\x02\x01\x03\x12\x03k\x17\x18\n\n\n\x02\x04\
    \x15\x12\x04m\0o\x01\n\n\n\x03\x04\x15\x01\x12\x03m\x08\x1e\n\x0b\n\x04\
    \x04\x15\x02\0\x12\x03n\x020\n\x0c\n\x05\x04\x15\x02\0\x04\x12\x03n\x02\
    \n\n\x0c\n\x05\x04\x15\x02\0\x06\x12\x03n\x0b\x1e\n\x0c\n\x05\x04\x15\
    \x02\0\x01\x12\x03n\x1f+\n\x0c\n\x05\x04\x15\x02\0\x03\x12\x03n./b\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::finance::file_descriptor().clone());
            deps.push(super::global::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(22);
            messages.push(StartCheckoutRequest::generated_message_descriptor_data());
            messages.push(StartCheckoutResponse::generated_message_descriptor_data());
            messages.push(GetRatesRequest::generated_message_descriptor_data());
            messages.push(GetRatesResponse::generated_message_descriptor_data());
            messages.push(CreateRatesRequest::generated_message_descriptor_data());
            messages.push(CreateRatesResponse::generated_message_descriptor_data());
            messages.push(AddPaymentMethodRequest::generated_message_descriptor_data());
            messages.push(RemovePaymentMethodRequest::generated_message_descriptor_data());
            messages.push(GetPaymentMethodsRequest::generated_message_descriptor_data());
            messages.push(GetPaymentMethodsResponse::generated_message_descriptor_data());
            messages.push(AddPaymentMethodResponse::generated_message_descriptor_data());
            messages.push(RemovePaymentMethodResponse::generated_message_descriptor_data());
            messages.push(SaveAuthorizationRequest::generated_message_descriptor_data());
            messages.push(SaveAuthorizationResponse::generated_message_descriptor_data());
            messages.push(CaptureFundsRequest::generated_message_descriptor_data());
            messages.push(CaptureFundsResponse::generated_message_descriptor_data());
            messages.push(GetPayrollRequest::generated_message_descriptor_data());
            messages.push(GetPayrollResponse::generated_message_descriptor_data());
            messages.push(GetPaymentsRequest::generated_message_descriptor_data());
            messages.push(GetPaymentsResponse::generated_message_descriptor_data());
            messages.push(GetTransactionRequest::generated_message_descriptor_data());
            messages.push(GetTransactionResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
