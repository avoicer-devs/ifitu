// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `health_check.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:health_check.HealthCheckRequest)
pub struct HealthCheckRequest {
    // message fields
    // @@protoc_insertion_point(field:health_check.HealthCheckRequest.service)
    pub service: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:health_check.HealthCheckRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HealthCheckRequest {
    fn default() -> &'a HealthCheckRequest {
        <HealthCheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheckRequest {
    pub fn new() -> HealthCheckRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service",
            |m: &HealthCheckRequest| { &m.service },
            |m: &mut HealthCheckRequest| { &mut m.service },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HealthCheckRequest>(
            "HealthCheckRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HealthCheckRequest {
    const NAME: &'static str = "HealthCheckRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.service.is_empty() {
            os.write_string(1, &self.service)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HealthCheckRequest {
        HealthCheckRequest::new()
    }

    fn clear(&mut self) {
        self.service.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HealthCheckRequest {
        static instance: HealthCheckRequest = HealthCheckRequest {
            service: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HealthCheckRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HealthCheckRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HealthCheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:health_check.HealthCheckResponse)
pub struct HealthCheckResponse {
    // message fields
    // @@protoc_insertion_point(field:health_check.HealthCheckResponse.status)
    pub status: ::protobuf::EnumOrUnknown<health_check_response::ServingStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:health_check.HealthCheckResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HealthCheckResponse {
    fn default() -> &'a HealthCheckResponse {
        <HealthCheckResponse as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheckResponse {
    pub fn new() -> HealthCheckResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &HealthCheckResponse| { &m.status },
            |m: &mut HealthCheckResponse| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HealthCheckResponse>(
            "HealthCheckResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HealthCheckResponse {
    const NAME: &'static str = "HealthCheckResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != ::protobuf::EnumOrUnknown::new(health_check_response::ServingStatus::SERVING_STATUS_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.status.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != ::protobuf::EnumOrUnknown::new(health_check_response::ServingStatus::SERVING_STATUS_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HealthCheckResponse {
        HealthCheckResponse::new()
    }

    fn clear(&mut self) {
        self.status = ::protobuf::EnumOrUnknown::new(health_check_response::ServingStatus::SERVING_STATUS_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HealthCheckResponse {
        static instance: HealthCheckResponse = HealthCheckResponse {
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HealthCheckResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HealthCheckResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HealthCheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HealthCheckResponse`
pub mod health_check_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:health_check.HealthCheckResponse.ServingStatus)
    pub enum ServingStatus {
        // @@protoc_insertion_point(enum_value:health_check.HealthCheckResponse.ServingStatus.SERVING_STATUS_UNSPECIFIED)
        SERVING_STATUS_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:health_check.HealthCheckResponse.ServingStatus.SERVING_STATUS_SERVING)
        SERVING_STATUS_SERVING = 1,
        // @@protoc_insertion_point(enum_value:health_check.HealthCheckResponse.ServingStatus.SERVING_STATUS_NOT_SERVING)
        SERVING_STATUS_NOT_SERVING = 2,
        // @@protoc_insertion_point(enum_value:health_check.HealthCheckResponse.ServingStatus.SERVING_STATUS_SERVICE_UNKNOWN)
        SERVING_STATUS_SERVICE_UNKNOWN = 3,
    }

    impl ::protobuf::Enum for ServingStatus {
        const NAME: &'static str = "ServingStatus";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ServingStatus> {
            match value {
                0 => ::std::option::Option::Some(ServingStatus::SERVING_STATUS_UNSPECIFIED),
                1 => ::std::option::Option::Some(ServingStatus::SERVING_STATUS_SERVING),
                2 => ::std::option::Option::Some(ServingStatus::SERVING_STATUS_NOT_SERVING),
                3 => ::std::option::Option::Some(ServingStatus::SERVING_STATUS_SERVICE_UNKNOWN),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ServingStatus] = &[
            ServingStatus::SERVING_STATUS_UNSPECIFIED,
            ServingStatus::SERVING_STATUS_SERVING,
            ServingStatus::SERVING_STATUS_NOT_SERVING,
            ServingStatus::SERVING_STATUS_SERVICE_UNKNOWN,
        ];
    }

    impl ::protobuf::EnumFull for ServingStatus {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("HealthCheckResponse.ServingStatus").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ServingStatus {
        fn default() -> Self {
            ServingStatus::SERVING_STATUS_UNSPECIFIED
        }
    }

    impl ServingStatus {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ServingStatus>("HealthCheckResponse.ServingStatus")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12health_check.proto\x12\x0chealth_check\".\n\x12HealthCheckRequest\
    \x12\x18\n\x07service\x18\x01\x20\x01(\tR\x07service\"\xf0\x01\n\x13Heal\
    thCheckResponse\x12G\n\x06status\x18\x01\x20\x01(\x0e2/.health_check.Hea\
    lthCheckResponse.ServingStatusR\x06status\"\x8f\x01\n\rServingStatus\x12\
    \x1e\n\x1aSERVING_STATUS_UNSPECIFIED\x10\0\x12\x1a\n\x16SERVING_STATUS_S\
    ERVING\x10\x01\x12\x1e\n\x1aSERVING_STATUS_NOT_SERVING\x10\x02\x12\"\n\
    \x1eSERVING_STATUS_SERVICE_UNKNOWN\x10\x032\xa6\x01\n\x06Health\x12L\n\
    \x05Check\x12\x20.health_check.HealthCheckRequest\x1a!.health_check.Heal\
    thCheckResponse\x12N\n\x05Watch\x12\x20.health_check.HealthCheckRequest\
    \x1a!.health_check.HealthCheckResponse0\x01B4Z2github.com/tonychill/ifit\
    u/apis/pb/go/health_checkJ\xbb\x04\n\x06\x12\x04\0\0\x15\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x15\n\x08\n\x01\x08\
    \x12\x03\x02\0I\n\t\n\x02\x08\x0b\x12\x03\x02\0I\n\n\n\x02\x04\0\x12\x04\
    \x04\0\x06\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x1a\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x05\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\t\x10\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x05\x13\x14\n\n\n\x02\x04\x01\x12\x04\x08\0\x10\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x08\x08\x1b\n\x0c\n\x04\x04\x01\x04\0\x12\x04\t\
    \x02\x0e\x03\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03\t\x07\x14\n\r\n\x06\
    \x04\x01\x04\0\x02\0\x12\x03\n\x04#\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\
    \x12\x03\n\x04\x1e\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03\n!\"\n\r\
    \n\x06\x04\x01\x04\0\x02\x01\x12\x03\x0b\x04\x1f\n\x0e\n\x07\x04\x01\x04\
    \0\x02\x01\x01\x12\x03\x0b\x04\x1a\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x02\
    \x12\x03\x0b\x1d\x1e\n\r\n\x06\x04\x01\x04\0\x02\x02\x12\x03\x0c\x04#\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x02\x01\x12\x03\x0c\x04\x1e\n\x0e\n\x07\x04\
    \x01\x04\0\x02\x02\x02\x12\x03\x0c!\"\n\r\n\x06\x04\x01\x04\0\x02\x03\
    \x12\x03\r\x04'\n\x0e\n\x07\x04\x01\x04\0\x02\x03\x01\x12\x03\r\x04\"\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x03\x02\x12\x03\r%&\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03\x0f\x02\x1b\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0f\x02\x0f\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0f\x10\x16\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\x0f\x19\x1a\n\n\n\x02\x06\0\x12\x04\x12\0\x15\x01\n\n\
    \n\x03\x06\0\x01\x12\x03\x12\x08\x0e\n\x0b\n\x04\x06\0\x02\0\x12\x03\x13\
    \x02>\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x13\x06\x0b\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x13\x0c\x1e\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x13)<\
    \n\x0b\n\x04\x06\0\x02\x01\x12\x03\x14\x02E\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03\x14\x06\x0b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x14\x0c\
    \x1e\n\x0c\n\x05\x06\0\x02\x01\x06\x12\x03\x14)/\n\x0c\n\x05\x06\0\x02\
    \x01\x03\x12\x03\x140Cb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(HealthCheckRequest::generated_message_descriptor_data());
            messages.push(HealthCheckResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(health_check_response::ServingStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
